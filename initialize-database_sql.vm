#parse("./include/data-types-postgresql.vm")
-- File generated by $generator.name ( version $generator.version ) - Date $today.date("yyyy-MM-dd") ( Time $today.time ) --

--
-- PostgreSQL database
--

#foreach ( $entity in $selectedEntities )
#set ( $uncapitalizedEntityName = ${fn.uncapitalize($entity.name)})
## Table attributes on creation
#set ( $tableColumns = "" )
#foreach ( $attrib in $entity.attributes )
#set ($attribType = "${DOLLAR}dataTypes.${attrib.neutralType}")
#set ( $uncapitalizedAttribName = ${fn.uncapitalize($attrib.name)})
#if ( $attrib.isAutoIncremented() )
#set ( $tableColumns = $tableColumns + "${uncapitalizedAttribName} SERIAL" )
#else
#set ( $tableColumns = $tableColumns + "${uncapitalizedAttribName} #evaluate($attribType)" )
#end
#if ( $foreach.count < $entity.attributes.size() )
#if ( !$attrib.isAutoIncremented() && $attrib.isNotNull() )
#set ( $tableColumns = $tableColumns + " NOT NULL,
    " )
#else
#set ( $tableColumns = $tableColumns + ",
    " )
#end
#else
#if ( $attrib.isNotNull() )
#set ( $tableColumns = $tableColumns + " NOT NULL" )
#end
#end
#end
##
--
-- Name: $entity.name;
-- Type: TABLE;
--

CREATE TABLE if not exists $uncapitalizedEntityName (
    $tableColumns
);

--
-- Name: $entity.name ${uncapitalizedEntityName}_pkey;
-- Type: CONSTRAINT;
--

ALTER TABLE ONLY $uncapitalizedEntityName
    ADD CONSTRAINT ${uncapitalizedEntityName}_pkey PRIMARY KEY ($entity.keyAttributesNamesAsString(', '));

--------------------------------------------------------------------
#end
#foreach ( $entity in $selectedEntities )
#set ( $uncapitalizedEntityName = ${fn.uncapitalize($entity.name)})
#foreach( $link in $entity.selectedLinks )
#foreach( $linkAttribute in $link.attributes )
#if ($foreach.count == 1)

--
-- Name: $entity.name ${uncapitalizedEntityName}_${linkAttribute.originAttribute.name}_fkey;
-- Type: FK CONSTRAINT;
--
#end

ALTER TABLE ONLY $uncapitalizedEntityName
    ADD CONSTRAINT ${uncapitalizedEntityName}_${linkAttribute.originAttribute.name}_fkey FOREIGN KEY (${linkAttribute.originAttribute.name}) REFERENCES ${link.fieldName}(${linkAttribute.targetAttribute.name}) ON DELETE SET NULL;
#end
#end
#end